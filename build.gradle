buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:7.0.4"
        classpath "org.grails.plugins:views-gradle:2.0.2"
    }
}

plugins {
  id 'com.google.cloud.tools.jib' version '2.4.0'
}

version "0.1"
group "org.world"

apply plugin:"eclipse"
apply plugin:"idea"

// Commenting out the war plugin is recommended when using with Jib. The default tomcat
// spring boot starter used by Grails doesn't play nicely with the default jetty image used by jib.
// Commenting out the war plugin will cause jib to use the outputs of the jar gradle task, which seems to work
// well.
// apply plugin:"war"

apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.plugins.views-json"

repositories {
    maven { url "https://repo.grails.org/grails/core" }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-codecs"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-datasource"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.4.18.Final"
    compile "org.grails.plugins:views-json"
    compile "org.grails.plugins:views-json-templates"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    profile "org.grails.profiles:rest-api"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "javax.xml.bind:jaxb-api:2.3.1"
    testCompile "io.micronaut:micronaut-inject-groovy"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.mockito:mockito-core"
    testCompile "io.micronaut:micronaut-http-client"
    testCompile "org.grails:grails-web-testing-support"
    testCompile "org.grails:views-json-testing-support"
    testCompile "org.hibernate.validator:hibernate-validator:6.0.20.Final"
    
    // Cache plugin depends on GPars, which causes a conflicting version of groovy all on the classpath when used with JIB
    
    compile ("org.grails.plugins:cache") {
      exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
}

bootRun {
    ignoreExitValue true
    jvmArgs(
        '-Dspring.output.ansi.enabled=always', 
        '-noverify', 
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}


// The "compileGsonViews" task added by Grails does not contribute outputs in the normal way. The below configuration
// ensures that the classes are included in the container image created by jib.
jib {

  // Collect the declared outputs from the compileGsonViews task and create extraDirectory entries in jib
  extraDirectories.paths {
    tasks.compileGsonViews.outputs.files.each { fileEntry ->
      path { 
        from = fileEntry

        // Path in the container where we want to write the gson classes.
        into = '/app/gson-classes' 
      }
    }
  }
  container {

    // Container path we wrote our gson classes to needs adding to the classpath.
    extraClasspath = ['/app/gson-classes']
    
    ports = ['8080'] // This is the default grails port.
  }
  // ... The rest of your jib config. from, to etc...
}


